__NUXT_JSONP__("/blog/tag/rust", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M){return {data:[{articles:[{slug:"rust-profiling",description:"valgrindを用いたRustのバイナリープログラムのプロファイリング手法を紹介します．",title:"valgrindを使ってRustのコードをプロファイリングする",img:A,alt:"Rocket",author:{name:"Malik Olivier Boussejra",slug:"olivier",bio:"CTO at Epigno",img:"\u002Fimg\u002Fauthors\u002Fpic-malik-olivier-boussejra.jpg"},tags:[u],toc:[{id:s,depth:l,text:s},{id:B,depth:l,text:"valgrind のインストール"},{id:C,depth:l,text:"callgrind の使い方"},{id:D,depth:l,text:"calgrind_annotate で call graph を分析する"},{id:t,depth:l,text:t}],body:{type:E,children:[{type:b,tag:e,props:{},children:[{type:a,value:"CTOのOlivierです．"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"今回は，Rustのプログラムを高速化した話を記事にまとめました．"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Rustは，C\u002FC++と同じシステムプログラミング言語で，マシン言語（バイナリーコード）にコンパイルされるという特徴をもっていて，コンパイルには "},{type:b,tag:f,props:{href:"https:\u002F\u002Fgithub.com\u002Frust-lang\u002Frust",rel:[v,w,x],target:y},children:[{type:a,value:"rustc"}]},{type:a,value:" というコンパイラを使用します．"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"基本的にC\u002FC++と同じ感覚でプログラミングすることが可能です．"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"当記事では，Rustのプロファイラである "},{type:b,tag:f,props:{href:"https:\u002F\u002Fvalgrind.org\u002F",rel:[v,w,x],target:y},children:[{type:a,value:z}]},{type:a,value:" を用いたバイナリープログラムのプロファイリング手法を紹介します．"}]},{type:a,value:c},{type:b,tag:m,props:{id:s},children:[{type:b,tag:f,props:{href:"#%E9%AB%98%E9%80%9F%E5%8C%96%E3%81%AE%E8%80%83%E3%81%88%E6%96%B9",ariaHidden:n,tabIndex:o},children:[{type:b,tag:p,props:{className:[q,r]},children:[]}]},{type:a,value:s}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"コードを高速化するには，まずボトルネックを見つける必要があります．\nソフトウェアの実行が遅いとき，主なボトルネックはわずか数カ所に集中するという傾向があります．\nそのため，こういったボトルネックを見つけ出して適切に対処することにより大幅な高速化が見込めます．"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"ボトルネックは関数レベルで探していきます．\nそこで，関数の計算コストを数値化し，関数のコール回数を調べるという手順を踏みます．"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"プログラムの高速化では，「関数の計算コスト×コール回数」を最小化することが目的となります．\n言い換えると，1回しかコールされない関数の計算コストがひじょうに高いという場合，その計算コストがプログラム全体の計算コストと比較して無視できる範囲ならば，その関数はボトルネックとはいえないということになります．\nすなわち，頻繁にコールされていて，かつ，計算コストが高い関数を狙って対処することで，より大きな高速化が期待できます．"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"関数の計算コストやコール回数を調べるためにプロファイラの "},{type:b,tag:d,props:{},children:[{type:a,value:"vargrind"}]},{type:a,value:" を使用します．"}]},{type:a,value:c},{type:b,tag:m,props:{id:B},children:[{type:b,tag:f,props:{href:"#valgrind-%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB",ariaHidden:n,tabIndex:o},children:[{type:b,tag:p,props:{className:[q,r]},children:[]}]},{type:b,tag:d,props:{},children:[{type:a,value:z}]},{type:a,value:" のインストール"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"DebianやUbuntuなどを使う場合は下記のコマンドでインストールが可能です．"}]},{type:a,value:c},{type:b,tag:g,props:{className:[h]},children:[{type:b,tag:i,props:{className:[j,k]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"sudo apt-get install valgrind\n"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"次に，関数の call graph を生成するために "},{type:b,tag:d,props:{},children:[{type:a,value:F}]},{type:a,value:" という "},{type:b,tag:d,props:{},children:[{type:a,value:z}]},{type:a,value:" のツールを使っていきます．"}]},{type:a,value:c},{type:b,tag:m,props:{id:C},children:[{type:b,tag:f,props:{href:"#callgrind-%E3%81%AE%E4%BD%BF%E3%81%84%E6%96%B9",ariaHidden:n,tabIndex:o},children:[{type:b,tag:p,props:{className:[q,r]},children:[]}]},{type:b,tag:d,props:{},children:[{type:a,value:F}]},{type:a,value:" の使い方"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"まず，プロファイリングしたいバイナリーをビルドします．"}]},{type:a,value:c},{type:b,tag:g,props:{className:[h]},children:[{type:b,tag:i,props:{className:[j,k]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"cargo build --release\n"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"自分のプロジェクトが "},{type:b,tag:d,props:{},children:[{type:a,value:"my-binary"}]},{type:a,value:" という名前なら，出力のバイナリーが "},{type:b,tag:d,props:{},children:[{type:a,value:"target\u002Frelease\u002Fmy-binary"}]},{type:a,value:" というファイルに含まれています．"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:b,tag:f,props:{href:"https:\u002F\u002Fvalgrind.org\u002Fdocs\u002Fmanual\u002Fcl-manual.html",rel:[v,w,x],target:y},children:[{type:a,value:"callgrindのドキュメンテーション"}]},{type:a,value:" を参考にしながら進みましょう．"}]},{type:a,value:c},{type:b,tag:g,props:{className:[h]},children:[{type:b,tag:i,props:{className:[j,k]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"valgrind --tool=callgrind target\u002Frelease\u002Fmy-binary\n"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"上記のコマンドで，自分で生成したバイナリーの call graph を生成することができます．\nまた，下記のように，任意の引数も追加することができます．"}]},{type:a,value:c},{type:b,tag:g,props:{className:[h]},children:[{type:b,tag:i,props:{className:[j,k]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"valgrind --tool=callgrind target\u002Frelease\u002Fmy-binary arg1 arg2\n"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"実行中に進捗を確認したい場合は "},{type:b,tag:d,props:{},children:[{type:a,value:G}]},{type:a,value:" というコマンドを実行することで，実行中のコールスタックのスナップショットを閲覧することも可能です．\nちなみに，リアルタイムで進捗を確認したい場合は "},{type:b,tag:d,props:{},children:[{type:a,value:"watch"}]},{type:a,value:" コマンドを使うととても便利です．"}]},{type:a,value:c},{type:b,tag:g,props:{className:[h]},children:[{type:b,tag:i,props:{className:[j,k]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"watch callgrind_control -b\n"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:b,tag:d,props:{},children:[{type:a,value:G}]},{type:a,value:" を実行すると下記のような結果が表示されます．"}]},{type:a,value:c},{type:b,tag:g,props:{className:[h]},children:[{type:b,tag:i,props:{className:[j,k]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"PID 9055: target\u002Frelease\u002Fmy-binary\n  Frame: Backtrace for Thread 1\n   [ 0]  core::ptr::const_ptr::\u003Cimpl *const T\u003E::is_null (36718722966 x)\n   [ 1]  \u003Ccore::slice::iter::Iter\u003CT\u003E as core::iter::traits::iterator::Iterator\u003E::next (7656659436 x)\n   [ 2]  \u003Ccore::slice::iter::Iter\u003CT\u003E as core::iter::traits::iterator::Iterator\u003E::find (12985059 x)\n   [ 3]  nurse_shift::rules::get_unmatched_request (12985059 x)\n   [ 4]  nurse_shift::rules::match_nurse_requests_deficiencies (102245 x)\n   [ 5]  nurse_shift::solution::\u003Cimpl nurse_shift::data_structures::Allocations\u003E::deficiencies (102245 x)\n   [ 6]  nurse_shift::solution::\u003Cimpl nurse_shift::data_structures::Allocations\u003E::score (89038 x)\n   [ 7]  nurse_shift::solution::\u003Cimpl nurse_shift::data_structures::Allocations\u003E::do_move (1 x)\n   [ 8]  nurse_shift::solve_with_options (1 x)\n   [ 9]  nurse_shift::solve (1 x)\n"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:b,tag:d,props:{},children:[{type:a,value:"[ 0]"}]},{type:a,value:" の行は，\nスナップショットを撮った瞬間，スレッドが "},{type:b,tag:d,props:{},children:[{type:a,value:"core::ptr::const_ptr::\u003Cimpl *const T\u003E::is_null"}]},{type:a,value:" という関数をまさに実行していると解釈することができます．\nまた，"},{type:b,tag:d,props:{},children:[{type:a,value:"[ 3]"}]},{type:a,value:" の行は，スナップショットを撮った瞬間，"},{type:b,tag:d,props:{},children:[{type:a,value:"nurse_shift::rules::get_unmatched_request"}]},{type:a,value:"という関数が既に 12,985,059回実行されたと解釈することができます．"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"結構なコール回数ですね！！！"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"このようにして，いろいろなスナップショットを見れば，どの関数をどれだけ実行しているかを定量的に評価することができます．"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"このコマンドは "},{type:b,tag:d,props:{},children:[{type:a,value:"callgrind.out.9055"}]},{type:a,value:" のようなファイルを生成します．このファイルは "},{type:b,tag:d,props:{},children:[{type:a,value:"callgrind_annotate"}]},{type:a,value:" コマンドで分析することができます．"}]},{type:a,value:c},{type:b,tag:m,props:{id:D},children:[{type:b,tag:f,props:{href:"#calgrind_annotate-%E3%81%A7-call-graph-%E3%82%92%E5%88%86%E6%9E%90%E3%81%99%E3%82%8B",ariaHidden:n,tabIndex:o},children:[{type:b,tag:p,props:{className:[q,r]},children:[]}]},{type:b,tag:d,props:{},children:[{type:a,value:"calgrind_annotate"}]},{type:a,value:" で call graph を分析する"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"ここから，いよいよ分析にはいります．\nプロファイラーが生成したグラフを基にボトルネックを探していきます．"}]},{type:a,value:c},{type:b,tag:g,props:{className:[h]},children:[{type:b,tag:i,props:{className:[j,k]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"callgrind_annotate callgrind.out.9055 | less\n"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"上記のコマンドを実行することで次のような結果が表示されます．"}]},{type:a,value:c},{type:b,tag:g,props:{className:[h]},children:[{type:b,tag:i,props:{className:[j,k]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"--------------------------------------------------------------------------------\nProfile data file 'callgrind.out.9055' (creator: callgrind-3.16.1)\n--------------------------------------------------------------------------------\nI1 cache:\nD1 cache:\nLL cache:\nTimerange: Basic block 0 - 201410050986\nTrigger: Program termination\nProfiled target:  target\u002Frelease\u002Fmy-binary (PID 164296, part 1)\nEvents recorded:  Ir\nEvents shown:     Ir\nEvent sort order: Ir\nThresholds:       99\nInclude dirs:\nUser annotated:\nAuto-annotation:  on\n\n--------------------------------------------------------------------------------\nIr\n--------------------------------------------------------------------------------\n796,344,143,930 (100.0%)  PROGRAM TOTALS\n\n--------------------------------------------------------------------------------\nIr                        file:function\n--------------------------------------------------------------------------------\n259,667,600,162 (32.61%)  \u003Calloc::vec::Vec\u003CT\u003E as alloc::vec::SpecFromIter\u003CT,I\u003E\u003E::from_iter\n109,539,950,687 (13.76%)  nurse_shift::rules::match_nurse_requests_deficiencies\n 95,685,736,780 (12.02%)  chrono::naive::date::NaiveDate::checked_add_signed\n 92,470,485,889 (11.61%)  alloc::slice::merge_sort\n 23,383,992,804 ( 2.94%)  .\u002Fmalloc\u002Fmalloc.c:_int_free [\u002Fusr\u002Flib\u002Fx86_64-linux-gnu\u002Flibc-2.32.so]\n 20,002,442,673 ( 2.51%)  .\u002Fmalloc\u002Fmalloc.c:_int_malloc [\u002Fusr\u002Flib\u002Fx86_64-linux-gnu\u002Flibc-2.32.so]\n 16,074,100,013 ( 2.02%)  alloc::slice::insert_head\n 15,719,791,404 ( 1.97%)  .\u002Fstring\u002F..\u002Fsysdeps\u002Fx86_64\u002Fmultiarch\u002Fmemmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms [\u002Fusr\u002Flib\u002Fx86_64-linux-gnu\u002Flibc-2.32.so]\n 15,590,654,669 ( 1.96%)  .\u002Fmalloc\u002Fmalloc.c:realloc [\u002Fusr\u002Flib\u002Fx86_64-linux-gnu\u002Flibc-2.32.so]\n 14,528,374,785 ( 1.82%)  time::duration::Duration::num_days\n 11,539,380,914 ( 1.45%)  itertools::groupbylazy::GroupBy\u003CK,I,F\u003E::step\n 10,394,828,259 ( 1.31%)  .\u002Fmalloc\u002Fmalloc.c:_int_realloc [\u002Fusr\u002Flib\u002Fx86_64-linux-gnu\u002Flibc-2.32.so]\n  9,494,444,515 ( 1.19%)  alloc::raw_vec::RawVec\u003CT,A\u003E::reserve\n  4,728,948,979 ( 0.59%)  .\u002Fmalloc\u002Fmalloc.c:malloc [\u002Fusr\u002Flib\u002Fx86_64-linux-gnu\u002Flibc-2.32.so]\n  4,478,516,922 ( 0.56%)  itertools::groupbylazy::GroupInner\u003CK,I,F\u003E::step_buffering\n"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"上記の結果を見ると，全体の32.61%，つまり約3分の1の時間を "},{type:b,tag:d,props:{},children:[{type:a,value:"\u003Calloc::vec::Vec\u003CT\u003E as alloc::vec::SpecFromIter\u003CT,I\u003E\u003E::from_iter"}]},{type:a,value:" という関数の実行に費やしているということが分かります．\nまた，13.76%もの時間を "},{type:b,tag:d,props:{},children:[{type:a,value:"nurse_shift::rules::match_nurse_requests_deficiencies"}]},{type:a,value:" の実行に費やしていることが分かります．"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"これは無視できる値ではありませんね．"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:b,tag:d,props:{},children:[{type:a,value:H}]},{type:a,value:"はRustの標準ライブラリー内の関数なので，こちらを直接いじることはできませんが，データ構造を変更するなどといった "},{type:b,tag:d,props:{},children:[{type:a,value:H}]},{type:a,value:" のコールを避けるリファクタリングをすることで，大幅なパーフォーマンス改善が期待できます．"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"その他に，"},{type:b,tag:d,props:{},children:[{type:a,value:"match_nurse_requests_deficiencies"}]},{type:a,value:" の実装を確認して，もっと計算量の低いアルゴリズムへの変更も検討できます．たとえば，"},{type:b,tag:d,props:{},children:[{type:a,value:I}]},{type:a,value:" のアルゴリズムを "},{type:b,tag:d,props:{},children:[{type:a,value:J}]},{type:a,value:" に変更することで，"},{type:b,tag:d,props:{},children:[{type:a,value:"n"}]},{type:a,value:" の値がひじょうに大きくなった場合にパフォーマンスの改善が見込めます．"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"事実，Epignoのソフトウェアで2つの関数のアルゴリズムの複雑度を "},{type:b,tag:d,props:{},children:[{type:a,value:I}]},{type:a,value:" から "},{type:b,tag:d,props:{},children:[{type:a,value:J}]},{type:a,value:" に変更したことでプログラム全体が5倍速くなったという実例もあります．"}]},{type:a,value:c},{type:b,tag:m,props:{id:t},children:[{type:b,tag:f,props:{href:"#%E3%81%BE%E3%81%A8%E3%82%81",ariaHidden:n,tabIndex:o},children:[{type:b,tag:p,props:{className:[q,r]},children:[]}]},{type:a,value:t}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"プロファイリングを実施することで，プログラムのボトルネックを効率的に見つけることができます．\nこれは，高速化の最初のステップとしてとても重要になります．"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"他にも，レグレッションテストも欠かせない工程ですね．"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"これで安心して，速いコードが書けます．"}]}]},dir:"\u002Farticles\u002Fja",path:"\u002Farticles\u002Fja\u002Frust-profiling",extension:K,createdAt:L,updatedAt:L}],tag:{slug:u,description:"A language empowering everyone to build reliable and efficient software.",name:u,img:A,toc:[],body:{type:E,children:[]},dir:"\u002Ftags",path:"\u002Ftags\u002Frust",extension:K,createdAt:M,updatedAt:M}}],fetch:[],mutations:void 0}}("text","element","\n","code","p","a","div","nuxt-content-highlight","pre","language-text","line-numbers",2,"h2","true",-1,"span","icon","icon-link","高速化の考え方","まとめ","rust","nofollow","noopener","noreferrer","_blank","valgrind","\u002Fimg\u002Frust\u002Fvostok-carrier-rocket.jpg","valgrind-のインストール","callgrind-の使い方","calgrind_annotate-で-call-graph-を分析する","root","callgrind","callgrind_control -b","from_iter","O(n²)","O(n log(n))",".md","2021-11-18T22:08:06.292Z","2020-12-03T02:39:58.784Z")));